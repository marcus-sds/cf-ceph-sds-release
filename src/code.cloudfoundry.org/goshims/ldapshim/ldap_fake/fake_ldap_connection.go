// This file was generated by counterfeiter
package ldap_fake

import (
	"sync"

	"code.cloudfoundry.org/goshims/ldapshim"
	"gopkg.in/ldap.v2"
)

type FakeLdapConnection struct {
	CloseStub        func()
	closeMutex       sync.RWMutex
	closeArgsForCall []struct{}
	BindStub        func(string, string) error
	bindMutex       sync.RWMutex
	bindArgsForCall []struct {
		arg1 string
		arg2 string
	}
	bindReturns struct {
		result1 error
	}
	SearchStub        func(*ldap.SearchRequest) (*ldap.SearchResult, error)
	searchMutex       sync.RWMutex
	searchArgsForCall []struct {
		arg1 *ldap.SearchRequest
	}
	searchReturns struct {
		result1 *ldap.SearchResult
		result2 error
	}
}

func (fake *FakeLdapConnection) Close() {
	fake.closeMutex.Lock()
	fake.closeArgsForCall = append(fake.closeArgsForCall, struct{}{})
	fake.closeMutex.Unlock()
	if fake.CloseStub != nil {
		fake.CloseStub()
	}
}

func (fake *FakeLdapConnection) CloseCallCount() int {
	fake.closeMutex.RLock()
	defer fake.closeMutex.RUnlock()
	return len(fake.closeArgsForCall)
}

func (fake *FakeLdapConnection) Bind(arg1 string, arg2 string) error {
	fake.bindMutex.Lock()
	fake.bindArgsForCall = append(fake.bindArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.bindMutex.Unlock()
	if fake.BindStub != nil {
		return fake.BindStub(arg1, arg2)
	} else {
		return fake.bindReturns.result1
	}
}

func (fake *FakeLdapConnection) BindCallCount() int {
	fake.bindMutex.RLock()
	defer fake.bindMutex.RUnlock()
	return len(fake.bindArgsForCall)
}

func (fake *FakeLdapConnection) BindArgsForCall(i int) (string, string) {
	fake.bindMutex.RLock()
	defer fake.bindMutex.RUnlock()
	return fake.bindArgsForCall[i].arg1, fake.bindArgsForCall[i].arg2
}

func (fake *FakeLdapConnection) BindReturns(result1 error) {
	fake.BindStub = nil
	fake.bindReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeLdapConnection) Search(arg1 *ldap.SearchRequest) (*ldap.SearchResult, error) {
	fake.searchMutex.Lock()
	fake.searchArgsForCall = append(fake.searchArgsForCall, struct {
		arg1 *ldap.SearchRequest
	}{arg1})
	fake.searchMutex.Unlock()
	if fake.SearchStub != nil {
		return fake.SearchStub(arg1)
	} else {
		return fake.searchReturns.result1, fake.searchReturns.result2
	}
}

func (fake *FakeLdapConnection) SearchCallCount() int {
	fake.searchMutex.RLock()
	defer fake.searchMutex.RUnlock()
	return len(fake.searchArgsForCall)
}

func (fake *FakeLdapConnection) SearchArgsForCall(i int) *ldap.SearchRequest {
	fake.searchMutex.RLock()
	defer fake.searchMutex.RUnlock()
	return fake.searchArgsForCall[i].arg1
}

func (fake *FakeLdapConnection) SearchReturns(result1 *ldap.SearchResult, result2 error) {
	fake.SearchStub = nil
	fake.searchReturns = struct {
		result1 *ldap.SearchResult
		result2 error
	}{result1, result2}
}

var _ ldapshim.LdapConnection = new(FakeLdapConnection)
