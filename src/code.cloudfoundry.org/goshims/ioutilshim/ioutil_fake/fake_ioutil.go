// This file was generated by counterfeiter
package ioutil_fake

import (
	"io"
	"os"
	"sync"

	"code.cloudfoundry.org/goshims/ioutilshim"
	"code.cloudfoundry.org/goshims/osshim"
)

type FakeIoutil struct {
	ReadAllStub        func(r io.Reader) ([]byte, error)
	readAllMutex       sync.RWMutex
	readAllArgsForCall []struct {
		r io.Reader
	}
	readAllReturns struct {
		result1 []byte
		result2 error
	}
	ReadFileStub        func(filename string) ([]byte, error)
	readFileMutex       sync.RWMutex
	readFileArgsForCall []struct {
		filename string
	}
	readFileReturns struct {
		result1 []byte
		result2 error
	}
	WriteFileStub        func(filename string, data []byte, perm os.FileMode) error
	writeFileMutex       sync.RWMutex
	writeFileArgsForCall []struct {
		filename string
		data     []byte
		perm     os.FileMode
	}
	writeFileReturns struct {
		result1 error
	}
	ReadDirStub        func(dirname string) ([]os.FileInfo, error)
	readDirMutex       sync.RWMutex
	readDirArgsForCall []struct {
		dirname string
	}
	readDirReturns struct {
		result1 []os.FileInfo
		result2 error
	}
	NopCloserStub        func(r io.Reader) io.ReadCloser
	nopCloserMutex       sync.RWMutex
	nopCloserArgsForCall []struct {
		r io.Reader
	}
	nopCloserReturns struct {
		result1 io.ReadCloser
	}
	TempFileStub        func(dir, prefix string) (f osshim.File, err error)
	tempFileMutex       sync.RWMutex
	tempFileArgsForCall []struct {
		dir    string
		prefix string
	}
	tempFileReturns struct {
		result1 osshim.File
		result2 error
	}
	TempDirStub        func(dir, prefix string) (name string, err error)
	tempDirMutex       sync.RWMutex
	tempDirArgsForCall []struct {
		dir    string
		prefix string
	}
	tempDirReturns struct {
		result1 string
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeIoutil) ReadAll(r io.Reader) ([]byte, error) {
	fake.readAllMutex.Lock()
	fake.readAllArgsForCall = append(fake.readAllArgsForCall, struct {
		r io.Reader
	}{r})
	fake.recordInvocation("ReadAll", []interface{}{r})
	fake.readAllMutex.Unlock()
	if fake.ReadAllStub != nil {
		return fake.ReadAllStub(r)
	}
	return fake.readAllReturns.result1, fake.readAllReturns.result2
}

func (fake *FakeIoutil) ReadAllCallCount() int {
	fake.readAllMutex.RLock()
	defer fake.readAllMutex.RUnlock()
	return len(fake.readAllArgsForCall)
}

func (fake *FakeIoutil) ReadAllArgsForCall(i int) io.Reader {
	fake.readAllMutex.RLock()
	defer fake.readAllMutex.RUnlock()
	return fake.readAllArgsForCall[i].r
}

func (fake *FakeIoutil) ReadAllReturns(result1 []byte, result2 error) {
	fake.ReadAllStub = nil
	fake.readAllReturns = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeIoutil) ReadFile(filename string) ([]byte, error) {
	fake.readFileMutex.Lock()
	fake.readFileArgsForCall = append(fake.readFileArgsForCall, struct {
		filename string
	}{filename})
	fake.recordInvocation("ReadFile", []interface{}{filename})
	fake.readFileMutex.Unlock()
	if fake.ReadFileStub != nil {
		return fake.ReadFileStub(filename)
	}
	return fake.readFileReturns.result1, fake.readFileReturns.result2
}

func (fake *FakeIoutil) ReadFileCallCount() int {
	fake.readFileMutex.RLock()
	defer fake.readFileMutex.RUnlock()
	return len(fake.readFileArgsForCall)
}

func (fake *FakeIoutil) ReadFileArgsForCall(i int) string {
	fake.readFileMutex.RLock()
	defer fake.readFileMutex.RUnlock()
	return fake.readFileArgsForCall[i].filename
}

func (fake *FakeIoutil) ReadFileReturns(result1 []byte, result2 error) {
	fake.ReadFileStub = nil
	fake.readFileReturns = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeIoutil) WriteFile(filename string, data []byte, perm os.FileMode) error {
	var dataCopy []byte
	if data != nil {
		dataCopy = make([]byte, len(data))
		copy(dataCopy, data)
	}
	fake.writeFileMutex.Lock()
	fake.writeFileArgsForCall = append(fake.writeFileArgsForCall, struct {
		filename string
		data     []byte
		perm     os.FileMode
	}{filename, dataCopy, perm})
	fake.recordInvocation("WriteFile", []interface{}{filename, dataCopy, perm})
	fake.writeFileMutex.Unlock()
	if fake.WriteFileStub != nil {
		return fake.WriteFileStub(filename, data, perm)
	}
	return fake.writeFileReturns.result1
}

func (fake *FakeIoutil) WriteFileCallCount() int {
	fake.writeFileMutex.RLock()
	defer fake.writeFileMutex.RUnlock()
	return len(fake.writeFileArgsForCall)
}

func (fake *FakeIoutil) WriteFileArgsForCall(i int) (string, []byte, os.FileMode) {
	fake.writeFileMutex.RLock()
	defer fake.writeFileMutex.RUnlock()
	return fake.writeFileArgsForCall[i].filename, fake.writeFileArgsForCall[i].data, fake.writeFileArgsForCall[i].perm
}

func (fake *FakeIoutil) WriteFileReturns(result1 error) {
	fake.WriteFileStub = nil
	fake.writeFileReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeIoutil) ReadDir(dirname string) ([]os.FileInfo, error) {
	fake.readDirMutex.Lock()
	fake.readDirArgsForCall = append(fake.readDirArgsForCall, struct {
		dirname string
	}{dirname})
	fake.recordInvocation("ReadDir", []interface{}{dirname})
	fake.readDirMutex.Unlock()
	if fake.ReadDirStub != nil {
		return fake.ReadDirStub(dirname)
	}
	return fake.readDirReturns.result1, fake.readDirReturns.result2
}

func (fake *FakeIoutil) ReadDirCallCount() int {
	fake.readDirMutex.RLock()
	defer fake.readDirMutex.RUnlock()
	return len(fake.readDirArgsForCall)
}

func (fake *FakeIoutil) ReadDirArgsForCall(i int) string {
	fake.readDirMutex.RLock()
	defer fake.readDirMutex.RUnlock()
	return fake.readDirArgsForCall[i].dirname
}

func (fake *FakeIoutil) ReadDirReturns(result1 []os.FileInfo, result2 error) {
	fake.ReadDirStub = nil
	fake.readDirReturns = struct {
		result1 []os.FileInfo
		result2 error
	}{result1, result2}
}

func (fake *FakeIoutil) NopCloser(r io.Reader) io.ReadCloser {
	fake.nopCloserMutex.Lock()
	fake.nopCloserArgsForCall = append(fake.nopCloserArgsForCall, struct {
		r io.Reader
	}{r})
	fake.recordInvocation("NopCloser", []interface{}{r})
	fake.nopCloserMutex.Unlock()
	if fake.NopCloserStub != nil {
		return fake.NopCloserStub(r)
	}
	return fake.nopCloserReturns.result1
}

func (fake *FakeIoutil) NopCloserCallCount() int {
	fake.nopCloserMutex.RLock()
	defer fake.nopCloserMutex.RUnlock()
	return len(fake.nopCloserArgsForCall)
}

func (fake *FakeIoutil) NopCloserArgsForCall(i int) io.Reader {
	fake.nopCloserMutex.RLock()
	defer fake.nopCloserMutex.RUnlock()
	return fake.nopCloserArgsForCall[i].r
}

func (fake *FakeIoutil) NopCloserReturns(result1 io.ReadCloser) {
	fake.NopCloserStub = nil
	fake.nopCloserReturns = struct {
		result1 io.ReadCloser
	}{result1}
}

func (fake *FakeIoutil) TempFile(dir string, prefix string) (f osshim.File, err error) {
	fake.tempFileMutex.Lock()
	fake.tempFileArgsForCall = append(fake.tempFileArgsForCall, struct {
		dir    string
		prefix string
	}{dir, prefix})
	fake.recordInvocation("TempFile", []interface{}{dir, prefix})
	fake.tempFileMutex.Unlock()
	if fake.TempFileStub != nil {
		return fake.TempFileStub(dir, prefix)
	}
	return fake.tempFileReturns.result1, fake.tempFileReturns.result2
}

func (fake *FakeIoutil) TempFileCallCount() int {
	fake.tempFileMutex.RLock()
	defer fake.tempFileMutex.RUnlock()
	return len(fake.tempFileArgsForCall)
}

func (fake *FakeIoutil) TempFileArgsForCall(i int) (string, string) {
	fake.tempFileMutex.RLock()
	defer fake.tempFileMutex.RUnlock()
	return fake.tempFileArgsForCall[i].dir, fake.tempFileArgsForCall[i].prefix
}

func (fake *FakeIoutil) TempFileReturns(result1 osshim.File, result2 error) {
	fake.TempFileStub = nil
	fake.tempFileReturns = struct {
		result1 osshim.File
		result2 error
	}{result1, result2}
}

func (fake *FakeIoutil) TempDir(dir string, prefix string) (name string, err error) {
	fake.tempDirMutex.Lock()
	fake.tempDirArgsForCall = append(fake.tempDirArgsForCall, struct {
		dir    string
		prefix string
	}{dir, prefix})
	fake.recordInvocation("TempDir", []interface{}{dir, prefix})
	fake.tempDirMutex.Unlock()
	if fake.TempDirStub != nil {
		return fake.TempDirStub(dir, prefix)
	}
	return fake.tempDirReturns.result1, fake.tempDirReturns.result2
}

func (fake *FakeIoutil) TempDirCallCount() int {
	fake.tempDirMutex.RLock()
	defer fake.tempDirMutex.RUnlock()
	return len(fake.tempDirArgsForCall)
}

func (fake *FakeIoutil) TempDirArgsForCall(i int) (string, string) {
	fake.tempDirMutex.RLock()
	defer fake.tempDirMutex.RUnlock()
	return fake.tempDirArgsForCall[i].dir, fake.tempDirArgsForCall[i].prefix
}

func (fake *FakeIoutil) TempDirReturns(result1 string, result2 error) {
	fake.TempDirStub = nil
	fake.tempDirReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeIoutil) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.readAllMutex.RLock()
	defer fake.readAllMutex.RUnlock()
	fake.readFileMutex.RLock()
	defer fake.readFileMutex.RUnlock()
	fake.writeFileMutex.RLock()
	defer fake.writeFileMutex.RUnlock()
	fake.readDirMutex.RLock()
	defer fake.readDirMutex.RUnlock()
	fake.nopCloserMutex.RLock()
	defer fake.nopCloserMutex.RUnlock()
	fake.tempFileMutex.RLock()
	defer fake.tempFileMutex.RUnlock()
	fake.tempDirMutex.RLock()
	defer fake.tempDirMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeIoutil) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ ioutilshim.Ioutil = new(FakeIoutil)
