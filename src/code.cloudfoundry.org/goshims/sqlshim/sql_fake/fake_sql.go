// This file was generated by counterfeiter
package sql_fake

import (
	"database/sql/driver"
	"sync"

	"code.cloudfoundry.org/goshims/sqlshim"
)

type FakeSql struct {
	RegisterStub        func(name string, d driver.Driver)
	registerMutex       sync.RWMutex
	registerArgsForCall []struct {
		name string
		d    driver.Driver
	}
	DriversStub        func() []string
	driversMutex       sync.RWMutex
	driversArgsForCall []struct{}
	driversReturns     struct {
		result1 []string
	}
	OpenStub        func(driverName, dataSourceName string) (sqlshim.SqlDB, error)
	openMutex       sync.RWMutex
	openArgsForCall []struct {
		driverName     string
		dataSourceName string
	}
	openReturns struct {
		result1 sqlshim.SqlDB
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeSql) Register(name string, d driver.Driver) {
	fake.registerMutex.Lock()
	fake.registerArgsForCall = append(fake.registerArgsForCall, struct {
		name string
		d    driver.Driver
	}{name, d})
	fake.recordInvocation("Register", []interface{}{name, d})
	fake.registerMutex.Unlock()
	if fake.RegisterStub != nil {
		fake.RegisterStub(name, d)
	}
}

func (fake *FakeSql) RegisterCallCount() int {
	fake.registerMutex.RLock()
	defer fake.registerMutex.RUnlock()
	return len(fake.registerArgsForCall)
}

func (fake *FakeSql) RegisterArgsForCall(i int) (string, driver.Driver) {
	fake.registerMutex.RLock()
	defer fake.registerMutex.RUnlock()
	return fake.registerArgsForCall[i].name, fake.registerArgsForCall[i].d
}

func (fake *FakeSql) Drivers() []string {
	fake.driversMutex.Lock()
	fake.driversArgsForCall = append(fake.driversArgsForCall, struct{}{})
	fake.recordInvocation("Drivers", []interface{}{})
	fake.driversMutex.Unlock()
	if fake.DriversStub != nil {
		return fake.DriversStub()
	}
	return fake.driversReturns.result1
}

func (fake *FakeSql) DriversCallCount() int {
	fake.driversMutex.RLock()
	defer fake.driversMutex.RUnlock()
	return len(fake.driversArgsForCall)
}

func (fake *FakeSql) DriversReturns(result1 []string) {
	fake.DriversStub = nil
	fake.driversReturns = struct {
		result1 []string
	}{result1}
}

func (fake *FakeSql) Open(driverName string, dataSourceName string) (sqlshim.SqlDB, error) {
	fake.openMutex.Lock()
	fake.openArgsForCall = append(fake.openArgsForCall, struct {
		driverName     string
		dataSourceName string
	}{driverName, dataSourceName})
	fake.recordInvocation("Open", []interface{}{driverName, dataSourceName})
	fake.openMutex.Unlock()
	if fake.OpenStub != nil {
		return fake.OpenStub(driverName, dataSourceName)
	}
	return fake.openReturns.result1, fake.openReturns.result2
}

func (fake *FakeSql) OpenCallCount() int {
	fake.openMutex.RLock()
	defer fake.openMutex.RUnlock()
	return len(fake.openArgsForCall)
}

func (fake *FakeSql) OpenArgsForCall(i int) (string, string) {
	fake.openMutex.RLock()
	defer fake.openMutex.RUnlock()
	return fake.openArgsForCall[i].driverName, fake.openArgsForCall[i].dataSourceName
}

func (fake *FakeSql) OpenReturns(result1 sqlshim.SqlDB, result2 error) {
	fake.OpenStub = nil
	fake.openReturns = struct {
		result1 sqlshim.SqlDB
		result2 error
	}{result1, result2}
}

func (fake *FakeSql) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.registerMutex.RLock()
	defer fake.registerMutex.RUnlock()
	fake.driversMutex.RLock()
	defer fake.driversMutex.RUnlock()
	fake.openMutex.RLock()
	defer fake.openMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeSql) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ sqlshim.Sql = new(FakeSql)
